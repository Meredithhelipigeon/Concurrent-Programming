CS343 Assignment 1 

q1b:

q1b(i):
Experiement Without compiler optimization:

We compare original program with q1returnglobal, q1returntype, q1returntypec
Parameters we use: 50000000 10000 1003 
./exception         | ./returnglobal      | ./returntype        | ./returntypec
2.67u 0.00s 0:02.70 | 2.88u 0.00s 0:02.90 | 9.47u 0.00s 0:09.50 | 2.81u 0.00s 0:02.83
2.78u 0.00s 0:02.78 | 2.87u 0.00s 0:02.88 | 9.50u 0.00s 0:09.51 | 2.81u 0.00s 0:02.81
2.70u 0.00s 0:02.70 | 2.89u 0.00s 0:02.89 | 9.19u 0.00s 0:09.20 | 2.78u 0.00s 0:02.78
2.75u 0.00s 0:02.76 | 3.36u 0.00s 0:03.37 | 9.29u 0.00s 0:09.30 | 2.80u 0.00s 0:02.80
2.70u 0.00s 0:02.71 | 2.87u 0.00s 0:02.88 | 9.51u 0.00s 0:09.53 | 2.84u 0.00s 0:02.84
2.74u 0.00s 0:02.74 | 2.93u 0.00s 0:02.93 | 9.96u 0.00s 0:09.97 | 2.77u 0.00s 0:02.78
2.77u 0.00s 0:02.78 | 2.91u 0.00s 0:02.91 | 9.36u 0.00s 0:09.37 | 2.88u 0.00s 0:02.88
2.70u 0.00s 0:02.71 | 3.63u 0.00s 0:03.63 | 9.45u 0.00s 0:09.45 | 2.80u 0.00s 0:02.80

Experiement With compiler optimization:

We compare original program with q1returnglobal, q1returntype, q1returntypec
Parameters we use: 50000000 10000 1003 
./exception         | ./returnglobal      | ./returntype        | ./returntypec 
2.74u 0.00s 0:02.74 | 2.25u 0.00s 0:02.25 | 2.45u 0.00s 0:02.49 | 2.31u 0.00s 0:02.40
2.69u 0.00s 0:02.70 | 2.24u 0.00s 0:02.24 | 2.44u 0.00s 0:02.44 | 2.28u 0.00s 0:02.28
2.68u 0.00s 0:02.68 | 2.26u 0.00s 0:02.26 | 2.56u 0.00s 0:02.57 | 2.28u 0.00s 0:02.28
2.76u 0.00s 0:02.76 | 2.27u 0.00s 0:02.27 | 2.48u 0.00s 0:02.49 | 2.28u 0.00s 0:02.28
2.69u 0.00s 0:02.70 | 2.26u 0.00s 0:02.26 | 2.56u 0.00s 0:02.57 | 2.29u 0.00s 0:02.29
2.78u 0.00s 0:02.80 | 2.25u 0.00s 0:02.25 | 2.48u 0.00s 0:02.49 | 2.34u 0.00s 0:02.34
2.69u 0.00s 0:02.70 | 2.25u 0.00s 0:02.25 | 2.49u 0.00s 0:02.49 | 2.29u 0.00s 0:02.29
2.70u 0.00s 0:02.70 | 2.30u 0.00s 0:02.30 | 2.46u 0.00s 0:02.46 | 2.36u 0.00s 0:02.37

q1b(ii):
Comparing returnglobal with original:
The performance difference between returnglobal and original is very small. The transformed code is on average 0.3s slower than original, 
which is about 11% slower. 

Comparing returntype with original:
The performance difference between returntype and original is very big. We can observe that when the average of
original is about 2.70s, the returntype has average time of between 9.3 and 9.4s, which is approximately 4 times of
original. The reason behind this is that the returntype program utilized the variant return-type in C++ 17.
Instead of returning type like double in original code, returning variant type takes extra resources overhead, which leads 
very slow code.

Comparing returntypec with original:
The performance difference between returntypec and original is not big. The transformed code is on average 0.1s slower than original,
which is about 5% slower. 

q1b(iii):
Comparing returnglobal with original:
The performance difference between returnglobal and original is very small. The transformed code is on average 0.35s quicker compare to original,
which is about 12% faster.

Comparing returntype with original:
The performance difference between returntype and original is that the transformed code is on average 0.25s quicker compare to original,
which is about 9% faster.

Comparing returntypec with original:
The performance difference between returntypec and original is that the transformed code is on average 0.3s quicker compare to original,
which is about 11% faster.

q1c:

q1c(i)
Experiement With compiler optimization:

We compare original program with q1returnglobal, q1returntype, q1returntypec
Parameters we use: 50000000 1000 1003 
./exception         | ./returnglobal      | ./returntype        | ./returntypec 
3.01u 0.00s 0:03.05 | 2.24u 0.00s 0:02.24 | 2.46u 0.00s 0:02.54 | 2.32u 0.00s 0:02.33
3.00u 0.00s 0:03.00 | 2.23u 0.00s 0:02.23 | 2.46u 0.00s 0:02.46 | 2.27u 0.00s 0:02.27
2.95u 0.00s 0:02.95 | 2.38u 0.00s 0:02.41 | 2.47u 0.00s 0:02.48 | 2.28u 0.00s 0:02.28
2.99u 0.00s 0:03.00 | 2.69u 0.00s 0:02.69 | 2.43u 0.00s 0:02.44 | 2.29u 0.00s 0:02.30
2.94u 0.00s 0:02.94 | 2.26u 0.00s 0:02.26 | 2.45u 0.00s 0:02.45 | 2.30u 0.00s 0:02.30
2.99u 0.00s 0:03.00 | 2.51u 0.00s 0:02.51 | 2.53u 0.00s 0:02.54 | 2.31u 0.00s 0:02.31
3.01u 0.00s 0:03.01 | 2.27u 0.00s 0:02.27 | 2.45u 0.00s 0:02.46 | 2.28u 0.00s 0:02.28
3.04u 0.03s 0:03.09 | 2.31u 0.00s 0:02.31 | 2.52u 0.00s 0:02.53 | 2.27u 0.00s 0:02.27
2.98u 0.00s 0:02.99 | 2.25u 0.00s 0:02.26 | 2.45u 0.00s 0:02.45 | 2.27u 0.00s 0:02.27
2.95u 0.00s 0:02.95 | 2.26u 0.00s 0:02.27 | 2.49u 0.00s 0:02.49 | 2.28u 0.00s 0:02.28
2.96u 0.00s 0:02.96 | 2.29u 0.00s 0:02.31 | 2.46u 0.00s 0:02.46 | 2.28u 0.00s 0:02.28
3.01u 0.00s 0:03.02 | 2.34u 0.00s 0:02.35 | 2.44u 0.00s 0:02.44 | 2.33u 0.00s 0:02.34
 

We compare original program with q1returnglobal, q1returntype, q1returntypec
Parameters we use: 50000000 100 1003
./exception         | ./returnglobal      | ./returntype        | ./returntypec
7.30u 0.01s 0:07.34 | 4.33u 0.01s 0:04.51 | 4.13u 0.00s 0:04.17 | 3.86u 0.00s 0:03.88
7.75u 0.01s 0:07.88 | 4.07u 0.00s 0:04.10 | 3.98u 0.00s 0:03.98 | 3.95u 0.00s 0:03.95
7.74u 0.00s 0:07.83 | 3.87u 0.00s 0:03.93 | 4.07u 0.00s 0:04.08 | 3.68u 0.00s 0:03.68
7.78u 0.00s 0:07.89 | 3.95u 0.00s 0:07.45 | 4.04u 0.00s 0:04.05 | 3.68u 0.00s 0:03.68
7.77u 0.00s 0:07.85 | 3.91u 0.00s 0:03.93 | 4.21u 0.00s 0:04.21 | 4.02u 0.00s 0:04.10
7.27u 0.00s 0:07.27 | 3.94u 0.00s 0:03.94 | 4.44u 0.00s 0:04.55 | 3.76u 0.00s 0:03.76
7.13u 0.00s 0:07.13 | 3.86u 0.00s 0:03.86 | 4.14u 0.00s 0:04.15 | 3.91u 0.00s 0:03.91
7.25u 0.03s 0:07.28 | 3.79u 0.00s 0:03.80 | 4.38u 0.00s 0:04.44 | 3.81u 0.00s 0:03.81
7.69u 0.00s 0:07.75 | 3.69u 0.00s 0:03.69 | 4.40u 0.00s 0:04.41 | 3.85u 0.00s 0:03.85
7.67u 0.00s 0:07.73 | 3.99u 0.00s 0:04.07 | 4.04u 0.01s 0:04.06 | 3.85u 0.00s 0:03.85
7.34u 0.00s 0:07.36 | 3.91u 0.00s 0:03.92 | 4.00u 0.00s 0:04.00 | 3.85u 0.00s 0:03.85
7.53u 0.00s 0:07.53 | 4.09u 0.00s 0:04.10 | 3.86u 0.00s 0:03.87 | 3.77u 0.00s 0:03.77


We compare original program with q1returnglobal, q1returntype, q1returntypec
Parameters we use: 50000000 50 1003
./exception         | ./returnglobal      | ./returntype        | ./returntypec
8.53u 0.00s 0:08.56 | 2.34u 0.00s 0:02.61 | 2.50u 0.00s 0:02.52 | 2.30u 0.00s 0:02.32
8.64u 0.00s 0:08.67 | 2.27u 0.00s 0:02.27 | 2.48u 0.00s 0:02.52 | 2.29u 0.00s 0:02.29
8.50u 0.00s 0:08.51 | 2.27u 0.00s 0:02.27 | 2.46u 0.00s 0:02.56 | 2.27u 0.00s 0:02.27
8.66u 0.02s 0:08.70 | 2.26u 0.00s 0:02.26 | 2.44u 0.00s 0:02.44 | 2.29u 0.00s 0:02.29
8.51u 0.00s 0:08.51 | 2.25u 0.00s 0:02.25 | 2.50u 0.00s 0:02.50 | 2.27u 0.00s 0:02.27
8.58u 0.00s 0:12.07 | 2.26u 0.00s 0:02.26 | 2.42u 0.00s 0:02.43 | 2.29u 0.00s 0:02.30
8.51u 0.00s 0:08.54 | 2.37u 0.00s 0:02.49 | 2.44u 0.00s 0:02.44 | 2.35u 0.00s 0:02.47
8.51u 0.03s 0:08.52 | 2.25u 0.00s 0:02.26 | 2.48u 0.00s 0:02.48 | 2.28u 0.00s 0:02.28
8.54u 0.00s 0:08.55 | 2.26u 0.00s 0:02.26 | 2.46u 0.00s 0:02.46 | 2.33u 0.00s 0:02.33
8.47u 0.00s 0:08.48 | 2.25u 0.00s 0:02.25 | 2.45u 0.01s 0:02.45 | 2.25u 0.00s 0:02.25
8.48u 0.00s 0:08.49 | 2.24u 0.00s 0:02.24 | 2.45u 0.00s 0:02.46 | 2.29u 0.00s 0:02.29
8.53u 0.00s 0:08.53 | 2.27u 0.00s 0:02.27 | 2.43u 0.00s 0:02.43 | 2.41u 0.00s 0:02.41


q1c(ii)

When exception period is equal to 1000, we noticed that:

Comparing returnglobal with original: returnglobal is about on average 0.7s quicker than original, which is about 75% time of the original.
Comparing returntype with original: returntype is about on average 0.5s quicker than original, which is about 83% time of the original.
Comparing returntypec with original: returntypec is about on average 0.7s quicker than original, which about 75% time of the original.

When exception period is equal to 100, we noticed that:

Comparing returnglobal with original: returnglobal is about on average 3s quicker than original, which is about 60% time of the original.
Comparing returntype with original: returntype is about on average 3.6s quicker than original, which is about 55% time of the original.
Comparing returntypec with original: returntypec is about on average 3.8s quicker than original, which about 50% time of the original.

When exception period is equal to 50, we noticed that:

Comparing returnglobal with original: returnglobal is about on average 6.2s quicker than original, which is about 27% time of the original.
Comparing returntype with original: returntype is about on average 6s quicker than original, which is about 35% time of the original.
Comparing returntypec with original: returntypec is about on average 6.2s quicker than original, which about 27% time of the original. 

The reason is that when the eperiod is smaller, more exceptions are thrown. Everytime, when an error is raised, it has to search down
on stack about which catch-box to handle, which take a lot of time.
The transformed program doent use try-catch box and perform low-level operations, which save a lot of time compared to the original one.





