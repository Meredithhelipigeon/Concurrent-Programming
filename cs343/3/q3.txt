Question 3 b)
i.
For this question, we run "./buffer 55 100 50000 20 10 1" for both BUSY and NOBUSY

BUSY + OPTIMIZED
8.41u 0.02s 0:08.40r 7036kb
8.05u 0.03s 0:08.05r 7048kb
7.99u 0.02s 0:07.98r 6960kb
7.67u 0.00s 0:07.65r 6964kb

BUSY + NON-OPTIMIZED
8.49u 0.03s 0:08.52r 7064kb
8.32u 0.04s 0:08.33r 7048kb
7.85u 0.02s 0:08.06r 7044kb
7.86u 0.01s 0:07.85r 6956kb

NOBUSY + OPTIMIZED
9.32u 0.01s 0:09.31r 7064kb
8.61u 0.04s 0:08.62r 6964kb
8.62u 0.02s 0:08.60r 7068kb
9.22u 0.04s 0:09.22r 6912kb

NOBUSY + NON-OPTIMIZED
9.53u 0.02s 0:09.52r 7040kb
9.42u 0.02s 0:09.21r 7076kb
9.23u 0.01s 0:09.20r 7040kb
9.36u 0.02s 0:09.35r 7052kb

ii.
NOBUSY always terminates quicklier than BUSY ones by about 15% for both optimized and non-optimized algorithms.
Optimization always terminates slightly quicklier than NON-OPTIMIZED ones by about 5% for both NOBUSY and BUSY.

iii.
For this question, we run "./buffer 55 100 50000 20 10 4" for both BUSY and NOBUSY

BUSY + OPTIMIZED
335.11u 0.47s 1:24.17r 7188kb
324.27u 0.22s 1:21.04r 7164kb
323.68u 0.30s 1:20.91r 7148kb
321.82u 0.27s 1:20.48r 7164kb

BUSY + NON-OPTIMIZED
366.96u 0.32s 1:31.94r 7112kb
367.62u 0.50s 1:32.01r 7360kb
373.89u 0.51s 1:33.58r 7000kb
371.67u 0.62s 1:33.07r 7212kb

NOBUSY + OPTIMIZED
361.38u 0.30s 1:30.41r 7180kb
385.48u 1.42s 1:36.73r 7216kb
382.47u 0.39s 1:35.68r 7220kb
369.47u 0.43s 1:32.41r 7108kb

NOBUSY + NON-OPTIMIZED
403.75u 0.49s 1:40.96r 7220kb
381.33u 0.57s 1:35.42r 7200kb
392.78u 0.75s 1:38.39r 7376kb
376.68u 0.33s 1:34.27r 7208kb

iv.
MULTIPROCESSOR performs longer than UNIPROCESSOR by more than 30 times.

v.
Total Producer/Consumer blocks in insert/remove of NOBUSY is always bigger than that of BUSY.
It means that to create additional locks to avoid barging, we create more blocks in NOBUSY therefore spend extra efforts
to manage.

vi.
When there are more processors, we try to make more threads working concurrently.
However, there is more time that needs to be spent on waiting for recourses and more to acquire locks since inserting/removing process is not concurrent.
